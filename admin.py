import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import Database
from config import ADMIN_IDS, STATUS_CANCELLED

logger = logging.getLogger(__name__)

class AdminPanel:
    def __init__(self, db: Database):
        self.db = db
    
    def get_status_translation(self, status: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
        status_translations = {
            'pending': "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            'paid': "–û–ø–ª–∞—á–µ–Ω–æ",
            'in_progress': "–í —Ä–∞–±–æ—Ç–µ",
            'completed': "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            'disputed': "–°–ø–æ—Ä",
            'cancelled': "–û—Ç–º–µ–Ω–µ–Ω–æ"
        }
        return status_translations.get(status, status)
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in ADMIN_IDS
    
    async def handle_admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã /admin"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
            return
        
        await update.message.reply_text(
            "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.get_admin_keyboard()
        )
    
    def get_admin_keyboard(self):
        """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üí∞ –í—Å–µ —Å–¥–µ–ª–∫–∏", callback_data="admin_deals")],
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–¥–µ–ª–∫—É", callback_data="admin_find_deal")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_admin(update.effective_user.id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
            return
        
        if query.data == "admin_stats":
            await self.show_stats(update, context)
        elif query.data == "admin_users":
            await self.show_users(update, context)
        elif query.data == "admin_deals":
            await self.show_deals(update, context)
        elif query.data == "admin_find_deal":
            await self.show_find_deal(update, context)
        elif query.data == "admin_settings":
            await self.show_settings(update, context)
        elif query.data.startswith("admin_deal_"):
            deal_id = query.data.replace("admin_deal_", "")
            await self.show_deal_details(update, context, deal_id)
        elif query.data.startswith("admin_resolve_customer_"):
            deal_id = query.data.replace("admin_resolve_customer_", "")
            await self.resolve_dispute(deal_id, "customer", context)
            await query.edit_message_text("‚úÖ –°–ø–æ—Ä —Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –∑–∞–∫–∞–∑—á–∏–∫–∞!", reply_markup=self.get_admin_keyboard())
        elif query.data.startswith("admin_resolve_executor_"):
            deal_id = query.data.replace("admin_resolve_executor_", "")
            await self.resolve_dispute(deal_id, "executor", context)
            await query.edit_message_text("‚úÖ –°–ø–æ—Ä —Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!", reply_markup=self.get_admin_keyboard())
        elif query.data == "admin_clear_completed":
            await self.show_clear_completed_confirmation(update, context)
        elif query.data == "admin_clear_completed_confirm":
            await self.clear_completed_deals(update, context)
        elif query.data == "admin_panel":
            await query.edit_message_text(
                "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_admin_keyboard()
            )
        elif query.data == "admin_settings":
            await self.show_settings(update, context)
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        query = update.callback_query
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import sqlite3
        with sqlite3.connect(self.db.db_path) as conn:
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
            cursor.execute("SELECT COUNT(*) FROM deals")
            total_deals = cursor.fetchone()[0]
            
            # –°–¥–µ–ª–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            cursor.execute("SELECT status, COUNT(*) FROM deals GROUP BY status")
            deals_by_status = dict(cursor.fetchall())
            
            # –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
            cursor.execute("SELECT SUM(amount) FROM deals")
            total_amount = cursor.fetchone()[0] or 0
            
            # –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è
            cursor.execute("SELECT SUM(commission) FROM deals")
            total_commission = cursor.fetchone()[0] or 0
        
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
        stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        stats_text += f"üí∞ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_deals}\n"
        stats_text += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} —Ä—É–±.\n"
        stats_text += f"üí∏ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: {total_commission:.2f} —Ä—É–±.\n\n"
        
        stats_text += "üìà –°–¥–µ–ª–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
        for status, count in deals_by_status.items():
            emoji = {
                'pending': '‚è≥',
                'paid': 'üí∞',
                'in_progress': 'üöÄ',
                'completed': '‚úÖ',
                'disputed': '‚ö†Ô∏è',
                'cancelled': '‚ùå'
            }.get(status, '‚ùì')
            status_ru = self.get_status_translation(status)
            stats_text += f"{emoji} {status_ru}: {count}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(stats_text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        query = update.callback_query
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        import sqlite3
        with sqlite3.connect(self.db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT user_id, username, first_name, balance, created_at 
                FROM users 
                ORDER BY created_at DESC 
                LIMIT 10
            """)
            users = cursor.fetchall()
        
        users_text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        for user in users:
            user_id, username, first_name, balance, created_at = user
            users_text += f"üÜî ID: {user_id}\n"
            users_text += f"üë§ –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            users_text += f"üìõ Username: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            users_text += f"üí≥ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"
            users_text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {created_at}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(users_text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_deals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫"""
        query = update.callback_query
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏
        import sqlite3
        with sqlite3.connect(self.db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT d.deal_id, d.amount, d.commission, d.status, d.created_at,
                       c.first_name as customer_name, e.first_name as executor_name
                FROM deals d
                JOIN users c ON d.customer_id = c.user_id
                JOIN users e ON d.executor_id = e.user_id
                ORDER BY d.created_at DESC 
                LIMIT 10
            """)
            deals = cursor.fetchall()
        
        deals_text = "üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫\n\n"
        
        for deal in deals:
            deal_id, amount, commission, status, created_at, customer_name, executor_name = deal
            status_emoji = {
                'pending': '‚è≥',
                'paid': 'üí∞',
                'in_progress': 'üöÄ',
                'completed': '‚úÖ',
                'disputed': '‚ö†Ô∏è',
                'cancelled': '‚ùå'
            }.get(status, '‚ùì')
            
            deals_text += f"{status_emoji} –°–¥–µ–ª–∫–∞ {deal_id[:8]}...\n"
            deals_text += f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
            deals_text += f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission} —Ä—É–±.\n"
            deals_text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer_name}\n"
            deals_text += f"üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_name}\n"
            deals_text += f"üìä –°—Ç–∞—Ç—É—Å: {self.get_status_translation(status)}\n"
            deals_text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_at}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏
        keyboard = []
        for deal in deals:
            deal_id = deal[0]
            status_emoji = {
                'pending': '‚è≥',
                'paid': 'üí∞',
                'in_progress': 'üöÄ',
                'completed': '‚úÖ',
                'disputed': '‚ö†Ô∏è',
                'cancelled': '‚ùå'
            }.get(deal[3], '‚ùì')
            keyboard.append([InlineKeyboardButton(f"{status_emoji} –°–¥–µ–ª–∫–∞ {deal_id[:8]}...", callback_data=f"admin_deal_{deal_id}")])
        
        keyboard.extend([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_deals")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_deals")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(deals_text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        query = update.callback_query
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–¥–µ–ª–∫–∞–º
        completed_count = self.db.get_completed_deals_count()
        active_count = self.db.get_active_deals_count()
        
        settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
        settings_text += f"üí∞ –ö–æ–º–∏—Å—Å–∏—è: 40%\n"
        settings_text += f"üîß –í–µ—Ä—Å–∏—è: 1.0.0\n"
        settings_text += f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite\n"
        settings_text += f"ü§ñ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç\n\n"
        settings_text += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫:\n"
        settings_text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {completed_count}\n"
        settings_text += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n\n"
        settings_text += "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        
        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏", callback_data="admin_clear_completed")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(settings_text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_find_deal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏"""
        query = update.callback_query
        
        find_text = "üîç –ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É\n\n"
        find_text += "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏ (ID):\n"
        find_text += "–ü—Ä–∏–º–µ—Ä: abc123def456\n\n"
        find_text += "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –∏–ª–∏ –≤ —Å–ø–∏—Å–∫–µ —Å–¥–µ–ª–æ–∫."
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(find_text, reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏
        context.user_data['admin_state'] = 'waiting_deal_id'
    
    async def handle_deal_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É"""
        if not self.is_admin(update.effective_user.id):
            return
        
        if context.user_data.get('admin_state') != 'waiting_deal_id':
            return
        
        deal_id = update.message.text.strip()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['admin_state'] = None
        
        # –ò—â–µ–º —Å–¥–µ–ª–∫—É
        deal = self.db.get_deal(deal_id)
        if not deal:
            await update.message.reply_text(
                "‚ùå –°–¥–µ–ª–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.get_admin_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏
        await self.show_deal_details_admin(update, context, deal)
    
    async def show_deal_details_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE, deal: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        customer = self.db.get_user(deal['customer_id'])
        executor = self.db.get_user(deal['executor_id']) if deal['executor_id'] else None
        
        customer_name = customer['first_name'] if customer and customer['first_name'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        customer_username = customer['username'] if customer and customer['username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        executor_name = executor['first_name'] if executor and executor['first_name'] else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        executor_username = executor['username'] if executor and executor['username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        # –°—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
        status_emoji = {
            'pending': '‚è≥',
            'paid': 'üí∞',
            'in_progress': 'üöÄ',
            'completed': '‚úÖ',
            'disputed': '‚ö†Ô∏è',
            'cancelled': '‚ùå'
        }.get(deal['status'], '‚ùì')
        
        deal_text = f"üîç –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏\n\n"
        deal_text += f"üÜî ID: {deal['deal_id']}\n"
        deal_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} —Ä—É–±.\n"
        deal_text += f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {deal['commission']} —Ä—É–±.\n"
        deal_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}\n"
        deal_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {self.get_status_translation(deal['status'])}\n"
        deal_text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {deal['created_at']}\n\n"
        
        deal_text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫:\n"
        deal_text += f"   ID: {deal['customer_id']}\n"
        deal_text += f"   –ò–º—è: {customer_name}\n"
        deal_text += f"   Username: @{customer_username}\n\n"
        
        deal_text += f"üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:\n"
        deal_text += f"   ID: {deal['executor_id'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
        deal_text += f"   –ò–º—è: {executor_name}\n"
        deal_text += f"   Username: @{executor_username}\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []
        
        if deal['status'] == 'disputed':
            keyboard.append([
                InlineKeyboardButton("‚úÖ –†–µ—à–∏—Ç—å –≤ –ø–æ–ª—å–∑—É –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data=f"admin_resolve_customer_{deal['deal_id']}"),
                InlineKeyboardButton("‚úÖ –†–µ—à–∏—Ç—å –≤ –ø–æ–ª—å–∑—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"admin_resolve_executor_{deal['deal_id']}")
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫—É", url=f"https://t.me/{customer_username}")],
            [InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", url=f"https://t.me/{executor_username}")] if executor_username != "–ù–µ —É–∫–∞–∑–∞–Ω" else [],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_find_deal")]
        ])
        
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        keyboard = [row for row in keyboard if row]
        
        await update.message.reply_text(
            deal_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_deal_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, deal_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        query = update.callback_query
        
        deal = self.db.get_deal(deal_id)
        if not deal:
            await query.edit_message_text(
                "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                reply_markup=self.get_admin_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        customer = self.db.get_user(deal['customer_id'])
        executor = self.db.get_user(deal['executor_id']) if deal['executor_id'] else None
        
        customer_name = customer['first_name'] if customer and customer['first_name'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        customer_username = customer['username'] if customer and customer['username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        executor_name = executor['first_name'] if executor and executor['first_name'] else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        executor_username = executor['username'] if executor and executor['username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        # –°—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
        status_emoji = {
            'pending': '‚è≥',
            'paid': 'üí∞',
            'in_progress': 'üöÄ',
            'completed': '‚úÖ',
            'disputed': '‚ö†Ô∏è',
            'cancelled': '‚ùå'
        }.get(deal['status'], '‚ùì')
        
        deal_text = f"üîç –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏\n\n"
        deal_text += f"üÜî ID: {deal['deal_id']}\n"
        deal_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} —Ä—É–±.\n"
        deal_text += f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {deal['commission']} —Ä—É–±.\n"
        deal_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}\n"
        deal_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {self.get_status_translation(deal['status'])}\n"
        deal_text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {deal['created_at']}\n\n"
        
        deal_text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫:\n"
        deal_text += f"   ID: {deal['customer_id']}\n"
        deal_text += f"   –ò–º—è: {customer_name}\n"
        deal_text += f"   Username: @{customer_username}\n\n"
        
        deal_text += f"üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:\n"
        deal_text += f"   ID: {deal['executor_id'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
        deal_text += f"   –ò–º—è: {executor_name}\n"
        deal_text += f"   Username: @{executor_username}\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []
        
        if deal['status'] == 'disputed':
            keyboard.append([
                InlineKeyboardButton("‚úÖ –†–µ—à–∏—Ç—å –≤ –ø–æ–ª—å–∑—É –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data=f"admin_resolve_customer_{deal['deal_id']}"),
                InlineKeyboardButton("‚úÖ –†–µ—à–∏—Ç—å –≤ –ø–æ–ª—å–∑—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"admin_resolve_executor_{deal['deal_id']}")
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫—É", url=f"https://t.me/{customer_username}")],
            [InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", url=f"https://t.me/{executor_username}")] if executor_username != "–ù–µ —É–∫–∞–∑–∞–Ω" else [],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_deals")]
        ])
        
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        keyboard = [row for row in keyboard if row]
        
        await query.edit_message_text(
            deal_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_clear_completed_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        query = update.callback_query
        
        completed_count = self.db.get_completed_deals_count()
        active_count = self.db.get_active_deals_count()
        
        if completed_count == 0:
            await query.edit_message_text(
                "‚ÑπÔ∏è –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
                ])
            )
            return
        
        confirmation_text = "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫\n\n"
        confirmation_text += f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        confirmation_text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        confirmation_text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {completed_count}\n"
        confirmation_text += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {active_count} (–Ω–µ –±—É–¥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã)\n\n"
        confirmation_text += f"üóëÔ∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:\n"
        confirmation_text += f"‚Ä¢ {completed_count} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫\n"
        confirmation_text += f"‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∏—Ö —Å–¥–µ–ª–æ–∫\n"
        confirmation_text += f"‚Ä¢ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç—Ç–∏—Ö —Å–¥–µ–ª–æ–∫\n"
        confirmation_text += f"‚Ä¢ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç—Ç–∏—Ö —Å–¥–µ–ª–æ–∫\n"
        confirmation_text += f"‚Ä¢ –í—Å–µ –∏–Ω–≤–æ–π—Å—ã —ç—Ç–∏—Ö —Å–¥–µ–ª–æ–∫\n"
        confirmation_text += f"‚Ä¢ –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —ç—Ç–∏—Ö —Å–¥–µ–ª–æ–∫\n\n"
        confirmation_text += f"üîí –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏.\n\n"
        confirmation_text += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_clear_completed_confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")
            ]
        ]
        
        await query.edit_message_text(confirmation_text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def clear_completed_deals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        query = update.callback_query
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
            deleted_count = self.db.clear_completed_deals()
            
            result_text = "‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            result_text += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {deleted_count}\n"
            result_text += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏\n\n"
            result_text += f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            result_text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {self.db.get_completed_deals_count()}\n"
            result_text += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {self.db.get_active_deals_count()}\n\n"
            result_text += f"üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö!"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_panel")]
            ]
            
            await query.edit_message_text(result_text, reply_markup=InlineKeyboardMarkup(keyboard))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–¥–µ–ª–æ–∫!\n\n"
                f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
                ])
            )
    
    async def resolve_dispute(self, deal_id: str, resolution: str, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–ø–æ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ CryptoPay"""
        from crypto_bot_api import crypto_api
        deal = self.db.get_deal(deal_id)
        if not deal:
            return False

        # –ü–æ–ª—É—á–∞–µ–º crypto user_id –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ)
        customer_crypto_id = deal.get('customer_payment_address')
        executor_crypto_id = deal.get('executor_payment_address')
        amount = deal['amount']
        commission = deal['commission']

        if resolution == "customer":
            # –í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∑–∞–∫–∞–∑—á–∏–∫—É
            if customer_crypto_id and str(customer_crypto_id).isdigit():
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ CryptoPay
                success = crypto_api.transfer(str(customer_crypto_id), amount, "USDT", f"refund_{deal_id}")
                if success:
                    self.db.add_transaction(deal_id, deal['customer_id'], amount, "refund", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ CryptoPay")
                else:
                    self.db.update_balance(deal['customer_id'], amount)
                    self.db.add_transaction(deal_id, deal['customer_id'], amount, "refund", "–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å (–æ—à–∏–±–∫–∞ CryptoPay)")
            else:
                self.db.update_balance(deal['customer_id'], amount)
                self.db.add_transaction(deal_id, deal['customer_id'], amount, "refund", "–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å (–Ω–µ—Ç crypto user_id)")
        elif resolution == "executor":
            # –í—ã–ø–ª–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
            executor_amount = amount - commission
            if executor_crypto_id and str(executor_crypto_id).isdigit():
                success = crypto_api.transfer(str(executor_crypto_id), executor_amount, "USDT", f"payout_{deal_id}")
                if success:
                    self.db.add_transaction(deal_id, deal['executor_id'], executor_amount, "payout", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoPay")
                else:
                    self.db.update_balance(deal['executor_id'], executor_amount)
                    self.db.add_transaction(deal_id, deal['executor_id'], executor_amount, "payout", "–í—ã–ø–ª–∞—Ç–∞ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å (–æ—à–∏–±–∫–∞ CryptoPay)")
            else:
                self.db.update_balance(deal['executor_id'], executor_amount)
                self.db.add_transaction(deal_id, deal['executor_id'], executor_amount, "payout", "–í—ã–ø–ª–∞—Ç–∞ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å (–Ω–µ—Ç crypto user_id)")

        self.db.update_deal_status(deal_id, STATUS_CANCELLED)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        try:
            await context.bot.send_message(
                deal['customer_id'],
                f"‚ö†Ô∏è –°–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ {deal_id} —Ä–∞–∑—Ä–µ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            await context.bot.send_message(
                deal['executor_id'],
                f"‚ö†Ô∏è –°–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ {deal_id} —Ä–∞–∑—Ä–µ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ —Å–ø–æ—Ä–∞: {e}")

        return True 