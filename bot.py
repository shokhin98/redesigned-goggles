import logging
import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import BOT_TOKEN, ADMIN_IDS, COMMISSION_PERCENT, STATUS_PENDING, STATUS_PAID, STATUS_IN_PROGRESS, STATUS_COMPLETED, STATUS_DISPUTED, STATUS_CANCELLED
from database import Database
from keyboards import Keyboards
from admin import AdminPanel

import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_AMOUNT, WAITING_FOR_DESCRIPTION, WAITING_FOR_USERNAME = range(3)
WAITING_FOR_PAYMENT_METHOD, WAITING_FOR_PAYMENT_TYPE, WAITING_FOR_PREPAYMENT_AMOUNT = range(4, 7)

class GarantBot:
    def __init__(self):
        self.db = Database()
        self.admin_panel = AdminPanel(self.db)
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω–µ ConversationHandler)
        self.application.add_handler(CommandHandler("start", self.start_command))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        self.application.add_handler(CommandHandler("help", self.help_command))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rate
        self.application.add_handler(CommandHandler("rate", self.rate_command))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
        self.application.add_handler(CommandHandler("admin", self.admin_command))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        logger.info("üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏")
        deal_conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.create_deal_start, pattern="^create_deal$")
            ],
            states={
                WAITING_FOR_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_amount)],
                WAITING_FOR_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_description)],
            },
            fallbacks=[CallbackQueryHandler(self.cancel_operation, pattern="^cancel$")]
        )
        self.application.add_handler(deal_conv_handler)
        logger.info("‚úÖ ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–¥–µ–ª–æ–∫
        transfer_conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.request_username, pattern="^transfer_deal_")
            ],
            states={
                WAITING_FOR_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_username)],
            },
            fallbacks=[CallbackQueryHandler(self.cancel_operation, pattern="^cancel$")]
        )
        self.application.add_handler(transfer_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        assign_executor_conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.request_executor_username, pattern="^assign_executor_")
            ],
            states={
                WAITING_FOR_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_executor_username)],
            },
            fallbacks=[CallbackQueryHandler(self.cancel_operation, pattern="^cancel$")]
        )
        self.application.add_handler(assign_executor_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫
        offer_deal_conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.request_offer_username, pattern="^offer_deal_")
            ],
            states={
                WAITING_FOR_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_offer_username)],
            },
            fallbacks=[CallbackQueryHandler(self.cancel_operation, pattern="^cancel$")]
        )
        self.application.add_handler(offer_deal_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
        logger.info("üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π CallbackQueryHandler")
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        logger.info("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π CallbackQueryHandler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω-–ø–æ–∏—Å–∫–∞
        self.application.add_handler(MessageHandler(filters.TEXT, self.handle_text_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.accept_offered_deal, pattern="^accept_offered_deal_"))
        self.application.add_handler(CallbackQueryHandler(self.reject_offered_deal, pattern="^reject_offered_deal_"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –≤–Ω–µ ConversationHandler (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)
        self.application.add_handler(MessageHandler(filters.Regex(r"^/start"), self.start_command))
        self.application.add_handler(MessageHandler(filters.Regex(r"^/help"), self.help_command))
        self.application.add_handler(MessageHandler(filters.Regex(r"^/rate"), self.rate_command))
        self.application.add_handler(MessageHandler(filters.Regex(r"^/admin"), self.admin_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        self.application.add_handler(MessageHandler(
            filters.TEXT & filters.User(ADMIN_IDS),
            self.admin_panel.handle_deal_search
        ))

    def get_currency_symbol(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return "$"  # –í—Å–µ–≥–¥–∞ –¥–æ–ª–ª–∞—Ä—ã

    def get_currency_name(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return "USD"  # –í—Å–µ–≥–¥–∞ –¥–æ–ª–ª–∞—Ä—ã
    
    def get_payment_method_name(self, payment_method: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ CryptoBot –¥–ª—è –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        return 'üíé CryptoPay (USDT)'
    
    def get_status_translation(self, status: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
        status_translations = {
            STATUS_PENDING: "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            STATUS_PAID: "–û–ø–ª–∞—á–µ–Ω–æ",
            STATUS_IN_PROGRESS: "–í —Ä–∞–±–æ—Ç–µ",
            STATUS_COMPLETED: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            STATUS_DISPUTED: "–°–ø–æ—Ä",
            STATUS_CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω–æ",
            'pending': "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            'paid': "–û–ø–ª–∞—á–µ–Ω–æ",
            'in_progress': "–í —Ä–∞–±–æ—Ç–µ",
            'completed': "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            'disputed': "–°–ø–æ—Ä",
            'cancelled': "–û—Ç–º–µ–Ω–µ–Ω–æ"
        }
        return status_translations.get(status, status)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        self.db.add_user(user.id, user.username, user.first_name, user.last_name)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        unread_count = self.db.get_unread_notifications_count(user.id)

        welcome_text = f"""üõ°Ô∏è **–ì–ê–†–ê–ù–¢ –ë–û–¢** üõ°Ô∏è

üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!**

üîê **–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫**
üíº **–ó–∞—â–∏—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π**

üìã –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢:

üî∏ –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—É–º–º—ã
üî∏ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑
üî∏ –°—Ä–µ–¥—Å—Ç–≤–∞ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –≤ –≥–∞—Ä–∞–Ω—Ç–µ
üî∏ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–±–æ—Ç—É
üî∏ –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –¥–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è

üíé –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:

‚úÖ –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫
‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ 
‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
‚úÖ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üí∞ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: 2.0%

üöÄ –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""

        await update.message.reply_text(
            welcome_text,
            reply_markup=Keyboards.get_main_menu(unread_count)
        )

        return ConversationHandler.END
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/rate - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç

üí∞ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É:
1. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É"
2. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ —Ä—É–±–ª—è—Ö
3. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã
4. –û–ø–∏—à–∏—Ç–µ —É—Å–ª—É–≥—É
5. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–º–µ—Ç –∑–∞–∫–∞–∑

üí≥ –û–ø–ª–∞—Ç–∞:
‚Ä¢ –î–ª—è Crypto Bot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB
‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂
‚Ä¢ –î–µ–Ω—å–≥–∏ —É–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ –î–µ–Ω—å–≥–∏ —É–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∏ —Å–ø–æ—Ä–µ - —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
‚Ä¢ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @WawilonovX
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback
        if update.callback_query:
            await update.callback_query.edit_message_text(
                help_text,
                reply_markup=Keyboards.get_main_menu()
            )
        else:
                    await update.message.reply_text(
            help_text,
            reply_markup=Keyboards.get_main_menu()
        )
    
    async def rate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rate - –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç"""
        rate_info = "üí± –ö—É—Ä—Å USD: –∞–∫—Ç—É–∞–ª—å–Ω—ã–π\n\nüí° –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ."
        
        await update.message.reply_text(
            f"üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç\n\n{rate_info}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.",
            reply_markup=Keyboards.get_main_menu()
        )
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin"""
        await self.admin_panel.handle_admin_command(update, context)
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        try:
            await query.answer()
        except Exception:
            pass
        logger.info(f"üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏: {query.data}")
        if query.data == "main_menu":
            await self.show_main_menu(update, context)
            return
        elif query.data == "my_deals":
            await self.show_my_deals(update, context)
        elif query.data == "deposit":
            await self.show_deposit(update, context)
        elif query.data == "help":
            await self.help_command(update, context)
        elif query.data == "support":
            support_text = (
                "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                "üîß –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n\n"
                "üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @m1ras18\n"
                "üìß Email: support@garant-bot.com\n"
                "üåê –°–∞–π—Ç: https://garant-bot.com\n\n"
                "üí° –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
                "‚Ä¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É?\n"
                "‚Ä¢ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑?\n"
                "‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —Å–ø–æ—Ä–µ?\n"
                "‚Ä¢ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏?\n\n"
                "üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º'"
            )
            keyboard = [
                [InlineKeyboardButton("üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url="https://t.me/m1ras18")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
            await query.edit_message_text(
                support_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                disable_web_page_preview=True
            )
            return
        elif query.data == "notifications":
            await self.show_notifications(update, context)
        elif query.data == "mark_all_read":
            await self.mark_all_notifications_read(update, context)
        elif query.data == "available_deals":
            await self.show_available_deals(update, context)
        elif query.data == "deal_offers":
            await self.show_deal_offers(update, context)
        elif query.data == "my_offers":
            await self.show_my_offers(update, context)
        elif query.data.startswith("view_deal_"):
            await self.view_available_deal(update, context)
        elif query.data.startswith("accept_deal_"):
            await self.accept_deal(update, context)
        elif query.data.startswith("accept_offered_deal_"):
            await self.accept_offered_deal(update, context)
        elif query.data.startswith("reject_offered_deal_"):
            await self.reject_offered_deal(update, context)
        elif query.data.startswith("accept_offer_"):
            await self.accept_deal_offer(update, context)
        elif query.data.startswith("reject_offer_"):
            await self.reject_deal_offer(update, context)
        elif query.data.startswith("deal_"):
            await self.handle_deal_actions(update, context)
        elif query.data.startswith("pay_deal_"):
            await self.handle_payment(update, context)
        elif query.data.startswith("check_payment_"):
            await self.check_payment_status(update, context)
        elif query.data.startswith("confirm_payment_"):
            await self.confirm_payment(update, context)
        elif query.data.startswith("payment_confirmed_"):
            await self.payment_confirmed(update, context)
        elif query.data.startswith("payment_cancelled_"):
            await self.payment_cancelled(update, context)

        elif query.data.startswith("start_work_"):
            await self.start_work(update, context)
        elif query.data.startswith("complete_work_"):
            await self.complete_work(update, context)
        elif query.data.startswith("confirm_completion_"):
            await self.confirm_completion(update, context)
        elif query.data.startswith("receive_payment_"):
            await self.receive_payment(update, context)
        elif query.data.startswith("finish_deal_"):
            await self.finish_deal(update, context)
        elif query.data.startswith("confirm_complete_"):
            await self.confirm_complete_work(update, context)
        elif query.data.startswith("final_confirm_"):
            await self.final_confirm_completion(update, context)
        elif query.data.startswith("open_dispute_"):
            await self.open_dispute(update, context)

        elif query.data == "cancel":
            await self.cancel_operation(update, context)
        elif query.data == "start_captcha":
            await self.start_captcha(update, context)
        elif query.data == "new_captcha":
            await self.new_captcha(update, context)
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ callback
        elif query.data.startswith("admin_"):
            await self.admin_panel.handle_admin_callback(update, context)
        elif query.data.startswith("check_payment_status_"):
            await self.check_payment_status(update, context)
        elif query.data.startswith("verify_payment_"):
            await self.verify_payment_status(update, context)
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {query.data}")
            logger.warning(f"‚ö†Ô∏è ConversationHandler –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª callback: {query.data}")
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = update.effective_user.id
        unread_count = self.db.get_unread_notifications_count(user_id)
        try:
            await query.edit_message_text(
                "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ì–∞—Ä–∞–Ω—Ç –ë–æ—Ç–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=Keyboards.get_main_menu(unread_count)
            )
        except Exception as e:
            if 'Message is not modified' in str(e):
                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º query.answer –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                pass
            else:
                await query.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    async def cancel_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        user_id = update.effective_user.id
        unread_count = self.db.get_unread_notifications_count(user_id)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        await query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\nü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ì–∞—Ä–∞–Ω—Ç –ë–æ—Ç–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=Keyboards.get_main_menu(unread_count)
        )
        return ConversationHandler.END
    
    def generate_captcha(self):
        # –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –º–µ—Ç–æ–¥
        pass
    
    async def start_captcha(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –º–µ—Ç–æ–¥
        pass
    
    async def new_captcha(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –º–µ—Ç–æ–¥
        pass
    
    async def show_captcha(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –º–µ—Ç–æ–¥
        pass
    
    async def check_captcha(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –º–µ—Ç–æ–¥
        pass
    
    async def create_deal_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        query = update.callback_query
        user_id = update.effective_user.id
        logger.info(f"üéØ create_deal_start –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        context.user_data['role'] = 'customer'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ–º –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫
        logger.info("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        amount_text = "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:"
        
        await query.edit_message_text(
            amount_text,
            reply_markup=Keyboards.get_cancel_keyboard()
        )
        logger.info(f"‚úÖ create_deal_start –∑–∞–≤–µ—Ä—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º WAITING_FOR_AMOUNT: {WAITING_FOR_AMOUNT}")
        return WAITING_FOR_AMOUNT
    


    async def get_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        try:
            amount = float(update.message.text)
            if amount <= 0:
                await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                return WAITING_FOR_AMOUNT
            context.user_data['amount'] = amount
            # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            await update.message.reply_text(
                f"üí∞ –°—É–º–º–∞: {amount} $\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏:",
                reply_markup=Keyboards.get_cancel_keyboard()
            )
            return WAITING_FOR_DESCRIPTION
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
            return WAITING_FOR_AMOUNT

    async def get_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        description = update.message.text
        if len(description) < 10:
            await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤!")
            return WAITING_FOR_DESCRIPTION
        
        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
        amount = context.user_data.get('amount')
        
        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        deal_id = self.db.create_deal_extended(
            customer_id=user_id,
            amount=amount,
            payment_amount=amount,
            payment_method='crypto',
            payment_type='full',
            description=description,
            customer_payment_method='crypto',
            customer_payment_address='CryptoPay',
            executor_payment_method='crypto',
            executor_payment_address='CryptoPay'
        )
        
        # –°–æ–∑–¥–∞–µ–º —á–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoPay API
        try:
            from crypto_bot_api import crypto_api
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoPay API
            invoice_data = crypto_api.create_invoice(
                amount=amount,
                currency="USDT",
                description=f"–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ {deal_id}"
            )
            
            if invoice_data:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫
                check_id = invoice_data.get('invoice_id')
                pay_url = invoice_data.get('pay_url')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                self.db.create_check(check_id, user_id, amount, f"–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ {deal_id}", pay_url)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ —Å —á–µ–∫–æ–º
                deal_text = f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                deal_text += f"üÜî ID: {deal_id}\n"
                deal_text += f"üí∞ –°—É–º–º–∞: {amount} $\n"
                deal_text += f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {amount * (COMMISSION_PERCENT / 100)} $ ({COMMISSION_PERCENT}%)\n"
                deal_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                deal_text += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíé CryptoPay (USDT)\n"
                deal_text += f"üí≥ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n"
                deal_text += f"üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${amount} USD\n\n"
                deal_text += f"üí≥ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:\n"
                deal_text += f"üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —á–µ–∫:\n"
                deal_text += f"{pay_url}\n\n"
                deal_text += f"üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} USDT\n\n"
                deal_text += f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n"
                deal_text += f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {pay_url}"
                
                keyboard = [
                    [InlineKeyboardButton("üîó –û–ø–ª–∞—Ç–∏—Ç—å —á–µ–∫", url=pay_url)],
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{deal_id}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"deal_{deal_id}")],
                    [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"verify_payment_{deal_id}")],
                ]
                
                logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ –∏ —á–µ–∫ —Å–æ–∑–¥–∞–Ω—ã: {deal_id} - {amount} USDT, —á–µ–∫: {check_id}")
                
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoPay API")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞
            deal_text = f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            deal_text += f"üÜî ID: {deal_id}\n"
            deal_text += f"üí∞ –°—É–º–º–∞: {amount} $\n"
            deal_text += f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {amount * (COMMISSION_PERCENT / 100)} $ ({COMMISSION_PERCENT}%)\n"
            deal_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            deal_text += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: CryptoPay (USD)\n"
            deal_text += f"üí≥ –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: CryptoPay (USD)\n\n"
            deal_text += f"üìä –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n"
        deal_text += f"üí° –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."
        
        keyboard = [
            [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", callback_data=f"transfer_deal_{deal_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = f"üÜï –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ #{deal_id}\n\nüí∞ –°—É–º–º–∞: {amount} $\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\nüë§ –ó–∞–∫–∞–∑—á–∏–∫: {update.effective_user.first_name}"
        try:
            for admin_id in ADMIN_IDS:
                await context.bot.send_message(chat_id=admin_id, text=admin_message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        
        await update.message.reply_text(
            deal_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        context.user_data.clear()
        return ConversationHandler.END
    

    
    async def show_my_deals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        user_id = update.effective_user.id
        deals = self.db.get_user_deals(user_id)
        
        if not deals:
            await query.edit_message_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É!",
                reply_markup=Keyboards.get_main_menu()
            )
            return
        
        deals_text = "üìã –í–∞—à–∏ —Å–¥–µ–ª–∫–∏:\n\n"
        for i, deal in enumerate(deals[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
            status_emoji = {
                STATUS_PENDING: "‚è≥",
                STATUS_PAID: "üí∞",
                STATUS_IN_PROGRESS: "üöÄ",
                STATUS_COMPLETED: "‚úÖ",
                STATUS_DISPUTED: "‚ö†Ô∏è",
                STATUS_CANCELLED: "‚ùå"
            }.get(deal['status'], "‚ùì")
            
            deals_text += f"{status_emoji} –°–¥–µ–ª–∫–∞ #{i}\n"
            deals_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} $\n"
            deals_text += f"üìù {deal['description'][:50]}...\n"
            deals_text += f"üìä –°—Ç–∞—Ç—É—Å: {self.get_status_translation(deal['status'])}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
            if deal['executor_id'] is not None:
                executor = self.db.get_user(deal['executor_id'])
                if executor:
                    executor_name = executor.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    deals_text += f"üë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_name}\n"
                else:
                    deals_text += f"üë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –ù–∞–∑–Ω–∞—á–µ–Ω\n"
            else:
                deals_text += f"üë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
            
            deals_text += "\n"
        
        keyboard = []
        for i, deal in enumerate(deals[:5], 1):
            keyboard.append([InlineKeyboardButton(
                f"–°–¥–µ–ª–∫–∞ #{i}", 
                callback_data=f"deal_{deal['deal_id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        await query.edit_message_text(
            deals_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def handle_deal_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–¥–µ–ª–∫–æ–π"""
        query = update.callback_query
        deal_id = query.data.split("_", 1)[1]
        
        deal = self.db.get_deal(deal_id)
        if not deal:
            await query.edit_message_text("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=Keyboards.get_main_menu())
            return
        
        user_id = update.effective_user.id
        is_customer = deal['customer_id'] == user_id
        is_executor = deal['executor_id'] == user_id
        
        if not (is_customer or is_executor):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ!", reply_markup=Keyboards.get_main_menu())
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
        status_emoji = {
            STATUS_PENDING: "‚è≥",
            STATUS_PAID: "üí∞",
            STATUS_IN_PROGRESS: "üöÄ",
            STATUS_COMPLETED: "‚úÖ",
            STATUS_DISPUTED: "‚ö†Ô∏è",
            STATUS_CANCELLED: "‚ùå"
        }.get(deal['status'], "‚ùì")
        
        deal_text = f"{status_emoji} –°–¥–µ–ª–∫–∞ {deal_id}\n\n"
        deal_text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {deal['amount']} $\n"
        deal_text += f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {deal['commission']} $\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã
        payment_method = deal.get('payment_method', 'crypto')
        payment_type = deal.get('payment_type', 'full')
        payment_amount = deal.get('payment_amount', deal['amount'])
        
        deal_text += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíé CryptoPay (USDT)\n"
        
        if payment_type == 'prepayment':
            deal_text += f"üí∏ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ({payment_amount} $)\n"
            remaining = deal.get('remaining_amount', deal['amount'] - payment_amount)
            deal_text += f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {remaining} $\n"
        else:
            deal_text += f"üí∏ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n"
        
        deal_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}\n"
        deal_text += f"üìä –°—Ç–∞—Ç—É—Å: {self.get_status_translation(deal['status'])}\n"
        deal_text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {deal['created_at']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑—á–∏–∫–µ
        customer = self.db.get_user(deal['customer_id'])
        if customer:
            customer_name = customer.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            customer_username = customer.get('username', '–ë–µ–∑ username')
            deal_text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer_name} (@{customer_username})\n"
        else:
            deal_text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
        if deal['executor_id'] is not None:
            executor = self.db.get_user(deal['executor_id'])
            if executor:
                executor_name = executor.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                executor_username = executor.get('username', '–ë–µ–∑ username')
                deal_text += f"üë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_name} (@{executor_username})\n"
            else:
                deal_text += f"üë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –ù–∞–∑–Ω–∞—á–µ–Ω (ID: {deal['executor_id']})\n"
        else:
            deal_text += f"üë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
        
        deal_text += "\n"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        deal_data = {
            'executor_id': deal['executor_id'],
            'customer_id': deal['customer_id']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º username –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if deal['executor_id'] is not None:
            executor = self.db.get_user(deal['executor_id'])
            if executor and executor.get('username') and isinstance(executor['username'], str) and executor['username'].strip():
                deal_data['executor_username'] = executor['username']
            elif 'executor_username' in deal_data:
                del deal_data['executor_username']

        # –î–æ–±–∞–≤–ª—è–µ–º username –∑–∞–∫–∞–∑—á–∏–∫–∞
        customer = self.db.get_user(deal['customer_id'])
        if customer and customer.get('username') and isinstance(customer['username'], str) and customer['username'].strip():
            deal_data['customer_username'] = customer['username']
        elif 'customer_username' in deal_data:
            del deal_data['customer_username']
        
        if is_customer:
            deal_text += "üë§ –í—ã: –ó–∞–∫–∞–∑—á–∏–∫\n\n"
            
            # –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —á–µ–∫–æ–º
            if deal['status'] == STATUS_PENDING:
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–µ–∫ –¥–ª—è —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏
                checks = self.db.get_user_checks(user_id)
                payment_url = None
                
                for check in checks:
                    if f"–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ {deal_id}" in check.get('description', ''):
                        payment_url = check.get('pay_url')
                        break
                
                if payment_url:
                    deal_text += f"üí≥ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:\n"
                    deal_text += f"üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —á–µ–∫:\n"
                    deal_text += f"{payment_url}\n\n"
                    deal_text += f"üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_amount} USDT\n\n"
                    deal_text += f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n"
                    deal_text += f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {payment_url}"
                    
                    keyboard = [
                        [InlineKeyboardButton("üîó –û–ø–ª–∞—Ç–∏—Ç—å —á–µ–∫", url=payment_url)],
                        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"verify_payment_{deal_id}")],
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{deal_id}")],
                        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", callback_data=f"transfer_deal_{deal_id}")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_deals")]
                    ]
                else:
                    # –ï—Å–ª–∏ —á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    try:
                        from crypto_bot_api import crypto_api
                        
                        invoice_data = crypto_api.create_invoice(
                            amount=payment_amount,
                            currency="USDT",
                            description=f"–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ {deal_id}"
                        )
                        
                        if invoice_data:
                            check_id = invoice_data.get('invoice_id')
                            payment_url = invoice_data.get('pay_url')
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                            self.db.create_check(check_id, user_id, payment_amount, f"–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ {deal_id}", payment_url)
                            
                            deal_text += f"üí≥ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:\n"
                            deal_text += f"üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —á–µ–∫:\n"
                            deal_text += f"{payment_url}\n\n"
                            deal_text += f"üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_amount} USDT\n\n"
                            deal_text += f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n"
                            deal_text += f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {payment_url}"
                            
                            keyboard = [
                                [InlineKeyboardButton("üîó –û–ø–ª–∞—Ç–∏—Ç—å —á–µ–∫", url=payment_url)],
                                [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"verify_payment_{deal_id}")],
                                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{deal_id}")],
                                [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", callback_data=f"transfer_deal_{deal_id}")],
                                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_deals")]
                            ]
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            deal_text += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíé CryptoPay (USDT)\n"
                            deal_text += f"üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_amount} USDT\n\n"
                            deal_text += f"‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É"
                            
                            keyboard = [
                                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{deal_id}")],
                                [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", callback_data=f"transfer_deal_{deal_id}")],
                                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_deals")]
                            ]
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}: {e}")
                        deal_text += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíé CryptoPay (USDT)\n"
                        deal_text += f"üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_amount} USDT\n\n"
                        deal_text += f"‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É"
                        
                        keyboard = [
                            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{deal_id}")],
                            [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", callback_data=f"transfer_deal_{deal_id}")],
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_deals")]
                        ]
            else:
                keyboard = Keyboards.get_deal_actions_keyboard(deal_id, deal['status'], deal_data)
        else:
            deal_text += "üë∑ –í—ã: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            keyboard = Keyboards.get_executor_deal_keyboard(deal_id, deal['status'], deal_data)
        
        await query.edit_message_text(deal_text, reply_markup=keyboard)
    
    async def handle_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ —Å–¥–µ–ª–∫–∏"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['customer_id'] != update.effective_user.id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        if deal['status'] != STATUS_PENDING:
            await query.answer("‚ùå –°–¥–µ–ª–∫–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–ª–∞—Ç—ã
        payment_amount = deal.get('payment_amount', deal['amount'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        payment_text = f"üí≥ –û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ {deal_id}\n\n"
        payment_text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {deal['amount']} $\n"
        payment_text += f"üí∏ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíé CryptoPay (USDT)\n"
        payment_text += f"üí≥ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n"
        payment_text += f"üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_amount} USDT\n"
        payment_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}\n\n"
        payment_text += f"üí≥ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:\n"
        payment_text += f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã'\n"
        payment_text += f"2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ CryptoBot\n"
        payment_text += f"3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
        payment_text += f"4Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n\n"
        payment_text += f"‚ö†Ô∏è –ß–µ–∫ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏!"
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –°–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã", callback_data=f"confirm_payment_{deal_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"deal_{deal_id}")]
        ]
        
        await query.edit_message_text(
            payment_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def confirm_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–¥–µ–ª–∫–∏"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['customer_id'] != update.effective_user.id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        if deal['status'] != STATUS_PENDING:
            await query.answer("‚ùå –°–¥–µ–ª–∫–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞!")
            return
        
        payment_amount = deal.get('payment_amount', deal['amount'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞
        await query.edit_message_text(
            f"üí≥ –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã...\n\n"
            f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
            f"üí∞ –°—É–º–º–∞: {payment_amount} $\n"
            f"üíµ –°—É–º–º–∞ –≤ USDT: {payment_amount}\n\n"
            f"‚è≥ –°–æ–∑–¥–∞–µ–º —á–µ–∫ —á–µ—Ä–µ–∑ CryptoPay API...",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"confirm_payment_{deal_id}")
            ]])
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ–∫ —á–µ—Ä–µ–∑ CryptoPay API
        try:
            from crypto_bot_api import crypto_api
            
            invoice_data = crypto_api.create_invoice(
                amount=payment_amount,
                currency="USDT",
                description=f"–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ {deal_id}"
            )
            
            if invoice_data:
                check_id = invoice_data.get('invoice_id')
                payment_url = invoice_data.get('pay_url')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                self.db.create_check(check_id, update.effective_user.id, payment_amount, f"–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ {deal_id}", payment_url)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                payment_text = f"üí≥ –ß–µ–∫ —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n"
                payment_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
                payment_text += f"üí∞ –°—É–º–º–∞: {payment_amount} $\n"
                payment_text += f"üíµ –°—É–º–º–∞ –≤ USDT: {payment_amount}\n"
                payment_text += f"üí≥ –ß–µ–∫: {check_id}\n"
                payment_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}\n\n"
                payment_text += f"üí≥ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:\n"
                payment_text += f"üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å —á–µ–∫' –Ω–∏–∂–µ\n"
                payment_text += f"üí≥ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ CryptoBot –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —á–µ–∫\n"
                payment_text += f"‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n\n"
                payment_text += f"‚ö†Ô∏è –í–∞–∂–Ω–æ: –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é!"
                
                keyboard = [
                    [InlineKeyboardButton("üîó –û–ø–ª–∞—Ç–∏—Ç—å —á–µ–∫", url=payment_url)],
                    [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"verify_payment_{deal_id}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–µ", callback_data=f"deal_{deal_id}")]
                ]
                
                await query.edit_message_text(
                    payment_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
            else:
                error_text = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞\n\n"
                error_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
                error_text += f"üí∞ –°—É–º–º–∞: {payment_amount} $\n\n"
                error_text += f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ —á–µ—Ä–µ–∑ CryptoPay API.\n"
                error_text += f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"confirm_payment_{deal_id}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–µ", callback_data=f"deal_{deal_id}")]
                ]
                
                await query.edit_message_text(
                    error_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}: {e}")
            error_text = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞\n\n"
            error_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
            error_text += f"üí∞ –°—É–º–º–∞: {payment_amount} $\n\n"
            error_text += f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞.\n"
            error_text += f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"confirm_payment_{deal_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–µ", callback_data=f"deal_{deal_id}")]
            ]
            
            await query.edit_message_text(
                error_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    async def payment_confirmed(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['customer_id'] != update.effective_user.id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        if deal['status'] != STATUS_PENDING:
            await query.answer("‚ùå –°–¥–µ–ª–∫–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
        payment_amount = deal.get('payment_amount', deal['amount'])
        self.db.update_deal_status(deal_id, STATUS_PAID)
        self.db.add_transaction(deal_id, update.effective_user.id, payment_amount, "payment", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        notification_message = f"üí∞ –°–¥–µ–ª–∫–∞ {deal_id} –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É {payment_amount} $. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É."
        self.db.add_notification(deal['executor_id'], deal_id, "deal_paid", notification_message)
        
        await query.edit_message_text(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
            f"üí∞ –°—É–º–º–∞: {payment_amount} $\n"
            f"üìä –°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω–æ\n"
            f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —á–µ—Ä–µ–∑ API\n\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
            reply_markup=Keyboards.get_main_menu()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                deal['executor_id'],
                f"üí∞ –°–¥–µ–ª–∫–∞ {deal_id} –æ–ø–ª–∞—á–µ–Ω–∞!\n\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
                reply_markup=Keyboards.get_main_menu()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
    
    async def payment_cancelled(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['customer_id'] != update.effective_user.id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ
        await self.handle_payment(update, context)
    
    async def check_payment_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['customer_id'] != update.effective_user.id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–æ–π—Å
        invoice = self.db.get_deal_invoice(deal_id)
        if not invoice:
            await query.answer("‚ùå –ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ CryptoPay API
        from crypto_bot_api import crypto_api
        invoice_status = crypto_api.check_payment(invoice['invoice_id'])
        
        if invoice_status:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
            self.db.update_invoice_status(invoice['invoice_id'], 'paid')
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
            await self.payment_confirmed(update, context)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            await query.answer("üìä –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: –ù–µ –æ–ø–ª–∞—á–µ–Ω")
    
    async def verify_payment_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['customer_id'] != update.effective_user.id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        # –ò—â–µ–º —á–µ–∫ –¥–ª—è —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏
        checks = self.db.get_user_checks(update.effective_user.id)
        check_id = None
        
        for check in checks:
            if f"–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ {deal_id}" in check.get('description', ''):
                check_id = check.get('check_id')
                break
        
        if not check_id:
            await query.answer("‚ùå –ß–µ–∫ –¥–ª—è —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        await query.edit_message_text(
            f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã...\n\n"
            f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
            f"üí∞ –°—É–º–º–∞: {deal['amount']} $\n"
            f"üí≥ –ß–µ–∫: {check_id}\n\n"
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ CryptoPay API...",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"verify_payment_{deal_id}")
            ]])
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        try:
            from crypto_bot_api import crypto_api
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
            status_info = crypto_api.get_invoice_status(check_id)
            
            if status_info:
                status = status_info.get('status', 'unknown')
                amount = status_info.get('amount', 'N/A')
                created_at = status_info.get('created_at', 'N/A')
                
                if status == 'paid':
                    result_text = f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                    result_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
                    result_text += f"üí∞ –°—É–º–º–∞: {amount} USDT\n"
                    result_text += f"üí≥ –ß–µ–∫: {check_id}\n"
                    result_text += f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n"
                    result_text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
                    result_text += f"üéâ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!"
                    
                    keyboard = [
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"payment_confirmed_{deal_id}")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–µ", callback_data=f"deal_{deal_id}")]
                    ]
                else:
                    result_text = f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
                    result_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
                    result_text += f"üí∞ –°—É–º–º–∞: {amount} USDT\n"
                    result_text += f"üí≥ –ß–µ–∫: {check_id}\n"
                    result_text += f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n"
                    result_text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
                    result_text += f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    result_text += f"‚Ä¢ –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞\n"
                    result_text += f"‚Ä¢ –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–µ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —á–µ–∫\n"
                    result_text += f"‚Ä¢ –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ"
                    
                    keyboard = [
                        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"verify_payment_{deal_id}")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–µ", callback_data=f"deal_{deal_id}")]
                    ]
            else:
                result_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞\n\n"
                result_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
                result_text += f"üí≥ –ß–µ–∫: {check_id}\n\n"
                result_text += f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —á–µ–∫–∞."
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"verify_payment_{deal_id}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–µ", callback_data=f"deal_{deal_id}")]
                ]
            
            await query.edit_message_text(
                result_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}: {e}")
            
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
            error_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
            error_text += f"üí≥ –ß–µ–∫: {check_id}\n\n"
            error_text += f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã.\n"
            error_text += f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"verify_payment_{deal_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–µ", callback_data=f"deal_{deal_id}")]
            ]
            
            await query.edit_message_text(
                error_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    async def start_work(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ —Å–¥–µ–ª–∫–µ"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['executor_id'] != update.effective_user.id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        if deal['status'] != STATUS_PAID:
            await query.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞!")
            return
        
        self.db.update_deal_status(deal_id, STATUS_IN_PROGRESS)
        
        await query.edit_message_text(
            f"üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!\n\n"
            f"üìä –°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ\n\n"
            f"–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–∫–∞–∑ –∏ —Å–æ–æ–±—â–∏—Ç–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
            reply_markup=Keyboards.get_main_menu()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
        try:
            await context.bot.send_message(
                deal['customer_id'],
                f"üöÄ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –ø–æ —Å–¥–µ–ª–∫–µ {deal_id}!",
                reply_markup=Keyboards.get_main_menu()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
    
    async def complete_work(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['executor_id'] != update.effective_user.id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        if deal['status'] not in [STATUS_PAID, STATUS_IN_PROGRESS]:
            await query.answer("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        confirm_text = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã\n\n"
        confirm_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
        confirm_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} $\n"
        confirm_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}\n\n"
        confirm_text += f"‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é?\n\n"
        confirm_text += f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n"
        confirm_text += f"‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        confirm_text += f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞\n"
        confirm_text += f"‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–ø–ª–∞—Ç—É\n\n"
        confirm_text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É?"
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏–ª", callback_data=f"confirm_complete_{deal_id}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"deal_{deal_id}")
            ]
        ]
        
        await query.edit_message_text(
            confirm_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def send_commission_to_crypto_bot(self, deal_id: str, commission_amount: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤–Ω–µ—à–Ω—é—é –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂—É"""
        try:
            from crypto_bot_api import crypto_api
            
            # –ö–æ–º–∏—Å—Å–∏—è —É–∂–µ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (USDT), –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
            usdt_commission = commission_amount
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é —á–µ—Ä–µ–∑ CryptoPay API –Ω–∞ –≤–Ω–µ—à–Ω—é—é –±–∏—Ä–∂—É
            success = crypto_api.send_commission(usdt_commission, "USDT", f"Deal_{deal_id}")
            
            if success:
                logger.info(f"üí∞ –ö–æ–º–∏—Å—Å–∏—è {usdt_commission} USDT —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–Ω–µ—à–Ω—é—é –±–∏—Ä–∂—É –∑–∞ —Å–¥–µ–ª–∫—É {deal_id}")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é {usdt_commission} USDT –Ω–∞ –≤–Ω–µ—à–Ω—é—é –±–∏—Ä–∂—É –∑–∞ —Å–¥–µ–ª–∫—É {deal_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤–Ω–µ—à–Ω—é—é –±–∏—Ä–∂—É: {e}")
            return False
    
    async def confirm_completion(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['customer_id'] != update.effective_user.id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        if deal['status'] != STATUS_COMPLETED:
            await query.answer("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_text = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã\n\n"
        confirm_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
        confirm_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} $\n"
        confirm_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}\n\n"
        confirm_text += f"‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ?\n\n"
        confirm_text += f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n"
        confirm_text += f"‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –æ–ø–ª–∞—Ç—É: {deal['amount'] - deal['commission']} $\n"
        confirm_text += f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {deal['commission']} $\n"
        confirm_text += f"‚Ä¢ –°–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        confirm_text += f"‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ\n\n"
        confirm_text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–≤–æ–ª—å–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º?"
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data=f"final_confirm_{deal_id}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"deal_{deal_id}")
            ]
        ]
        
        await query.edit_message_text(
            confirm_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def receive_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['executor_id'] != update.effective_user.id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        if deal['status'] != STATUS_COMPLETED:
            await query.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return
        
        # –í—ã–ø–ª–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        executor_amount = deal['amount'] - deal['commission']
        self.db.update_balance(deal['executor_id'], executor_amount)
        self.db.add_transaction(deal_id, deal['executor_id'], executor_amount, "payout", "–í—ã–ø–ª–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç
        await self.send_commission_to_crypto_bot(deal_id, deal['commission'])
        
        # –ö–æ–º–∏—Å—Å–∏—è –±–æ—Ç—É
        self.db.add_transaction(deal_id, 0, deal['commission'], "commission", "–ö–æ–º–∏—Å—Å–∏—è –±–æ—Ç–∞")
        
        await query.edit_message_text(
            f"üéâ –î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã!\n\n"
            f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {executor_amount} $\n"
            f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {deal['commission']} $\n"
            f"üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!",
            reply_markup=Keyboards.get_main_menu()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
        try:
            await context.bot.send_message(
                deal['customer_id'],
                f"üí∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –æ–ø–ª–∞—Ç—É –ø–æ —Å–¥–µ–ª–∫–µ {deal_id}!\n\n"
                f"–°–¥–µ–ª–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                reply_markup=Keyboards.get_main_menu()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
    
    async def finish_deal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal:
            await query.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        user_id = update.effective_user.id
        is_customer = deal['customer_id'] == user_id
        is_executor = deal['executor_id'] == user_id
        
        if not (is_customer or is_executor):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
        if deal['status'] == STATUS_PENDING:
            await query.answer("‚ùå –°–¥–µ–ª–∫–∞ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞!")
            return
        elif deal['status'] == STATUS_PAID:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –Ω–∞–∂–∏–º–∞–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            if is_customer:
                await query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!")
                return
            else:
                # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É
                await self.complete_work(update, context)
                return
        elif deal['status'] == STATUS_IN_PROGRESS:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –Ω–∞–∂–∏–º–∞–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            if is_customer:
                await query.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return
            else:
                # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É
                await self.complete_work(update, context)
                return
        elif deal['status'] == STATUS_COMPLETED:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –Ω–∞–∂–∏–º–∞–µ—Ç - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            if is_customer:
                await self.confirm_completion(update, context)
                return
            else:
                # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏
                await self.receive_payment(update, context)
                return
        elif deal['status'] == STATUS_DISPUTED:
            await query.answer("‚ùå –°–¥–µ–ª–∫–∞ –≤ —Å–ø–æ—Ä–µ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        elif deal['status'] == STATUS_CANCELLED:
            await query.answer("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
            return
    
    async def confirm_complete_work(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['executor_id'] != update.effective_user.id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        if deal['status'] not in [STATUS_PAID, STATUS_IN_PROGRESS]:
            await query.answer("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
        self.db.update_deal_status(deal_id, STATUS_COMPLETED)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        success_text = f"‚úÖ –†–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        success_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
        success_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} $\n"
        success_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}\n"
        success_text += f"üìä –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–æ\n\n"
        success_text += f"üìß –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        success_text += f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞\n"
        success_text += f"üí∞ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: {deal['amount'] - deal['commission']} $"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ö —Å–¥–µ–ª–∫–µ", callback_data=f"deal_{deal_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            success_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
        try:
            notification_text = f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!\n\n"
            notification_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
            notification_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} $\n"
            notification_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}\n\n"
            notification_text += f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
            notification_text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ"
            
            notification_keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"confirm_completion_{deal_id}")],
                [InlineKeyboardButton("‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"open_dispute_{deal_id}")],
                [InlineKeyboardButton("üîô –ö —Å–¥–µ–ª–∫–µ", callback_data=f"deal_{deal_id}")]
            ]
            
            await context.bot.send_message(
                deal['customer_id'],
                notification_text,
                reply_markup=InlineKeyboardMarkup(notification_keyboard)
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
    
    async def final_confirm_completion(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–æ–º"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['customer_id'] != update.effective_user.id:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        if deal['status'] != STATUS_COMPLETED:
            await query.answer("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return
        
        # –í—ã–ø–ª–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        executor_amount = deal['amount'] - deal['commission']
        self.db.update_balance(deal['executor_id'], executor_amount)
        self.db.add_transaction(deal_id, deal['executor_id'], executor_amount, "payout", "–í—ã–ø–ª–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç
        await self.send_commission_to_crypto_bot(deal_id, deal['commission'])
        
        # –ö–æ–º–∏—Å—Å–∏—è –±–æ—Ç—É
        self.db.add_transaction(deal_id, 0, deal['commission'], "commission", "–ö–æ–º–∏—Å—Å–∏—è –±–æ—Ç–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        success_text = f"üéâ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        success_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
        success_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} $\n"
        success_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}\n"
        success_text += f"üìä –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–æ\n\n"
        success_text += f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª: {executor_amount} $\n"
        success_text += f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {deal['commission']} $\n\n"
        success_text += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            success_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        try:
            notification_text = f"üéâ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            notification_text += f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
            notification_text += f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {executor_amount} $\n"
            notification_text += f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {deal['commission']} $\n"
            notification_text += f"üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            notification_text += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É!"
            
            notification_keyboard = [
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await context.bot.send_message(
                deal['executor_id'],
                notification_text,
                reply_markup=InlineKeyboardMarkup(notification_keyboard)
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
    
    async def open_dispute(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal:
            await query.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        user_id = update.effective_user.id
        if deal['customer_id'] != user_id and deal['executor_id'] != user_id:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –Ω–∞ —Å–ø–æ—Ä
        self.db.update_deal_status(deal_id, STATUS_DISPUTED)
        
        dispute_text = f"‚ö†Ô∏è –°–ø–æ—Ä –æ—Ç–∫—Ä—ã—Ç –ø–æ —Å–¥–µ–ª–∫–µ {deal_id}\n\n"
        dispute_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} $\n"
        dispute_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}\n"
        dispute_text += f"üìä –°—Ç–∞—Ç—É—Å: –°–ø–æ—Ä\n\n"
        dispute_text += f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞."
        
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url="https://t.me/Ators13")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"deal_{deal_id}")]
        ]
        
        await query.edit_message_text(
            dispute_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        other_user_id = deal['executor_id'] if deal['customer_id'] == user_id else deal['customer_id']
        try:
            await context.bot.send_message(
                other_user_id,
                f"‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ {deal_id}!\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=Keyboards.get_main_menu()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–æ—Ä–µ: {e}")
    
    async def show_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = self.db.get_user_balance(user_id)
        currency_symbol = self.get_currency_symbol(user_id)
        
        balance_text = f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} {currency_symbol}\n\nüí° –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."
    
    async def request_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å username –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–¥–µ–ª–∫–∏"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        context.user_data['deal_id'] = deal_id
        
        await query.edit_message_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):",
            reply_markup=Keyboards.get_cancel_keyboard()
        )
        return WAITING_FOR_USERNAME
    
    async def get_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ username –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
        username = update.message.text.strip()
        deal_id = context.user_data.get('deal_id')
        
        if not username:
            await update.message.reply_text("‚ùå Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return WAITING_FOR_USERNAME
        
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if username.startswith('@'):
            username = username[1:]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        user = self.db.get_user_by_username(username)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return WAITING_FOR_USERNAME
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        offer_id = self.db.create_deal_offer(deal_id, update.effective_user.id, user['user_id'])
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_offered_deal_{offer_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_offered_deal_{offer_id}")
            ]
        ])
        try:
            await context.bot.send_message(
                user['user_id'],
                f"üì® –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏!\n\nID: {deal_id}\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}')
            await update.message.reply_text(
            f"‚úÖ –°–¥–µ–ª–∫–∞ {deal_id} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é @{username}",
                reply_markup=Keyboards.get_main_menu()
            )
        context.user_data.clear()
        return ConversationHandler.END
    
    async def request_executor_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å username –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        context.user_data['deal_id'] = deal_id
        
        await query.edit_message_text(
            "üë∑ –í–≤–µ–¥–∏—Ç–µ username –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–±–µ–∑ @):",
            reply_markup=Keyboards.get_cancel_keyboard()
        )
        return WAITING_FOR_USERNAME
    
    async def get_executor_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ username –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        username = update.message.text.strip()
        deal_id = context.user_data.get('deal_id')
        
        if not username:
            await update.message.reply_text("‚ùå Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return WAITING_FOR_USERNAME
        
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if username.startswith('@'):
            username = username[1:]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        user = self.db.get_user_by_username(username)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return WAITING_FOR_USERNAME
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        success = self.db.assign_executor(deal_id, user['id'])
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å @{username} –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}",
                reply_markup=Keyboards.get_main_menu()
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!",
                reply_markup=Keyboards.get_main_menu()
            )
        
        context.user_data.clear()
        return ConversationHandler.END
    
    async def request_offer_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å username –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        context.user_data['deal_id'] = deal_id
        
        await query.edit_message_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ (–±–µ–∑ @):",
            reply_markup=Keyboards.get_cancel_keyboard()
        )
        return WAITING_FOR_USERNAME
    
    async def get_offer_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ username –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        username = update.message.text.strip()
        deal_id = context.user_data.get('deal_id')
        if not username:
            await update.message.reply_text("‚ùå Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return WAITING_FOR_USERNAME
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if username.startswith('@'):
            username = username[1:]
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        user = self.db.get_user_by_username(username)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return WAITING_FOR_USERNAME
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–¥–µ–ª–∫—É
        success = self.db.offer_deal(deal_id, update.effective_user.id, user['id'])
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
            try:
                await context.bot.send_message(
                    update.effective_user.id,
                    f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}!"
                )
            except Exception:
                pass
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)
            try:
                await context.bot.send_message(
                    user['id'],
                    f"üì® –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.effective_user.username or update.effective_user.id} (ID: {deal_id})"
                )
            except Exception:
                pass
            await update.message.reply_text(
                f"‚úÖ –°–¥–µ–ª–∫–∞ {deal_id} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
            )
        context.user_data.clear()
        return ConversationHandler.END
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = update.effective_message
        chat = message.chat
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏ –æ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏ ‚Äî –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
        if update.effective_user.id in ADMIN_IDS and context.user_data.get('admin_state') == 'waiting_deal_id':
            await self.admin_panel.handle_deal_search(update, context)
            return
        # –¢–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
        if chat.type != 'private':
            if '@Almazov_guarantor_robot' not in message.text:
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = message.from_user
                    mention = user.mention_html() if hasattr(user, 'mention_html') else f"<a href='tg://user?id={user.id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>"
                    await context.bot.send_message(
                        chat.id,
                        f"{mention}, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ @Almazov_guarantor_robot –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!",
                        reply_to_message_id=message.message_id,
                        parse_mode='HTML'
                    )
                except Exception:
                    pass
                try:
                    await message.delete()
                except Exception:
                    pass
                return
        # –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏–ª–∏ –µ—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=Keyboards.get_main_menu()
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        self.application.run_polling()
    
    async def show_available_deals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        query = update.callback_query
        deals = self.db.get_available_deals()
        
        if not deals:
            await query.edit_message_text(
                "üîç –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n\n–í—Å–µ –∑–∞–∫–∞–∑—ã —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã –∏–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ.",
                reply_markup=Keyboards.get_main_menu()
            )
            return
        
        deals_text = "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for i, deal in enumerate(deals[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∑–∞–∫–∞–∑–æ–≤
            deals_text += f"üìã –ó–∞–∫–∞–∑ #{i}\n"
            deals_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} $\n"
            deals_text += f"üìù {deal['description'][:50]}...\n"
            deals_text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {deal.get('customer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            deals_text += f"üìÖ –°–æ–∑–¥–∞–Ω: {deal['created_at']}\n\n"
        
        keyboard = []
        for i, deal in enumerate(deals[:10], 1):
            keyboard.append([InlineKeyboardButton(
                f"–ó–∞–∫–∞–∑ #{i} - {deal['amount']} $", 
                callback_data=f"view_deal_{deal['deal_id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        await query.edit_message_text(
            deals_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def view_available_deal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        
        deal = self.db.get_deal(deal_id)
        if not deal or deal['status'] != STATUS_PENDING or deal['executor_id'] is not None:
            await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!", reply_markup=Keyboards.get_main_menu())
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑—á–∏–∫–µ
        customer = self.db.get_user(deal['customer_id'])
        customer_name = customer.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if customer else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        customer_username = customer.get('username', '–ë–µ–∑ username') if customer else '–ë–µ–∑ username'
        
        deal_text = f"üìã –ó–∞–∫–∞–∑ {deal_id}\n\n"
        deal_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} $\n"
        deal_text += f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {deal['commission']} $\n"
        deal_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}\n"
        deal_text += f"üìä –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
        deal_text += f"üìÖ –°–æ–∑–¥–∞–Ω: {deal['created_at']}\n"
        deal_text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer_name} (@{customer_username})\n\n"
        deal_text += f"üí° –ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑'"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_deal_{deal_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="available_deals")]
        ]
        
        await query.edit_message_text(
            deal_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def accept_deal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"""
        query = update.callback_query
        deal_id = query.data.split("_", 2)[2]
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω
        deal = self.db.get_deal(deal_id)
        if not deal or deal['status'] != STATUS_PENDING or deal['executor_id'] is not None:
            await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!", reply_markup=Keyboards.get_main_menu())
            return
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑
        success = self.db.accept_deal(deal_id, user_id)
        
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
            try:
                await context.bot.send_message(
                    deal['customer_id'],
                    f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ {deal_id} –ø—Ä–∏–Ω—è—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º!\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞: {e}")
            
            await query.edit_message_text(
                f"‚úÖ –ó–∞–∫–∞–∑ {deal_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                reply_markup=Keyboards.get_main_menu()
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞!",
                reply_markup=Keyboards.get_main_menu()
            )
    
    async def show_deal_offers(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        offers = self.db.get_user_deal_offers(user_id, 'pending')
        
        if not offers:
            await query.edit_message_text(
                "üì® –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫.",
                reply_markup=Keyboards.get_main_menu()
            )
            return
        
        offers_text = "üì® –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫:\n\n"
        for i, offer in enumerate(offers[:5], 1):
            deal = self.db.get_deal(offer['deal_id'])
            if deal:
                offers_text += f"üìã –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{i}\n"
                offers_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} $\n"
                offers_text += f"üìù {deal['description'][:50]}...\n"
                offers_text += f"üìÖ –ü–æ–ª—É—á–µ–Ω–æ: {offer['created_at']}\n\n"
        
        keyboard = []
        for i, offer in enumerate(offers[:5], 1):
            keyboard.append([InlineKeyboardButton(
                f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{i}", 
                callback_data=f"view_offer_{offer['offer_id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        await query.edit_message_text(
            offers_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_my_offers(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        offers = self.db.get_user_deal_offers(user_id, 'pending')
        
        if not offers:
            await query.edit_message_text(
                "üì® –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫.",
                reply_markup=Keyboards.get_main_menu()
            )
            return
        
        offers_text = "üì® –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫:\n\n"
        for i, offer in enumerate(offers[:5], 1):
            deal = self.db.get_deal(offer['deal_id'])
            if deal:
                offers_text += f"üìã –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{i}\n"
                offers_text += f"üí∞ –°—É–º–º–∞: {deal['amount']} $\n"
                offers_text += f"üìù {deal['description'][:50]}...\n"
                offers_text += f"üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {offer['created_at']}\n"
                offers_text += f"üìä –°—Ç–∞—Ç—É—Å: {self.get_status_translation(offer['status'])}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        
        await query.edit_message_text(
            offers_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def accept_offered_deal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"""
        query = update.callback_query
        offer_id = query.data.split('_', 3)[3]
        offer = self.db.get_deal_offer(offer_id)
        if not offer or offer['status'] != 'pending':
            await query.edit_message_text(
                "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
            )
            return
        deal_id = offer['deal_id']
        executor_id = offer['to_user_id']
        customer_id = offer['from_user_id']
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        self.db.update_deal_offer_status(offer_id, 'accepted')
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        success = self.db.assign_executor(deal_id, executor_id)
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            try:
                await context.bot.send_message(
                    executor_id,
                    f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —Å–¥–µ–ª–∫–∏!\nID: {deal_id}"
                )
                await context.bot.send_message(
                    customer_id,
                    f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–∏–Ω—è—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º!\nID: {deal_id}"
                )
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —Å—Ç–æ—Ä–æ–Ω: {e}')
            await query.edit_message_text(
                "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
            )
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
            )
    
    async def reject_offered_deal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"""
        query = update.callback_query
        offer_id = query.data.split('_', 3)[3]
        offer = self.db.get_deal_offer(offer_id)
        if not offer:
            await query.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        deal_id = offer['deal_id']
        executor_id = offer['to_user_id']
        customer_id = offer['from_user_id']
        self.db.update_deal_offer_status(offer_id, 'rejected')
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
        try:
            await context.bot.send_message(
                executor_id,
                f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.\nID: {deal_id}"
            )
            await context.bot.send_message(
                customer_id,
                f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.\nID: {deal_id}"
            )
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —Å—Ç–æ—Ä–æ–Ω: {e}')
        await query.edit_message_text(
            "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
    
    async def accept_deal_offer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        query = update.callback_query
        offer_id = query.data.split("_", 2)[2]
        
        offer = self.db.get_deal_offer(offer_id)
        if not offer or offer['status'] != 'pending':
            await query.edit_message_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!", reply_markup=Keyboards.get_main_menu())
            return
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        success = self.db.accept_deal(offer['deal_id'], offer['to_user_id'])
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            self.db.update_deal_offer_status(offer_id, 'accepted')
            
            await query.edit_message_text(
                f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–∏–Ω—è—Ç–æ!\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞.",
                reply_markup=Keyboards.get_main_menu()
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!",
                reply_markup=Keyboards.get_main_menu()
            )
    
    async def reject_deal_offer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        query = update.callback_query
        offer_id = query.data.split("_", 2)[2]
        
        offer = self.db.get_deal_offer(offer_id)
        if not offer or offer['status'] != 'pending':
            await query.edit_message_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!", reply_markup=Keyboards.get_main_menu())
            return
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        self.db.update_deal_offer_status(offer_id, 'rejected')
        
        await query.edit_message_text(
            "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.",
            reply_markup=Keyboards.get_main_menu()
        )
    
    async def show_support(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
        query = update.callback_query
        
        support_text = "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        support_text += "üîß –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n\n"
        support_text += "üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @m1ras18\n"
        support_text += "üìß Email: support@garant-bot.com\n"
        support_text += "üåê –°–∞–π—Ç: https://garant-bot.com\n\n"
        support_text += "üí° –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        support_text += "‚Ä¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É?\n"
        support_text += "‚Ä¢ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑?\n"
        support_text += "‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —Å–ø–æ—Ä–µ?\n"
        support_text += "‚Ä¢ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏?\n\n"
        support_text += "üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º'"
        
        keyboard = [
            [InlineKeyboardButton("üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url="https://t.me/m1ras18")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            support_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    
    async def show_deposit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        balance = self.db.get_user_balance(user_id)
        
        deposit_text = f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
        deposit_text += f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} $\n\n"
        deposit_text += "üí° –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.\n\n"
        deposit_text += "üìã –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n"
        deposit_text += "1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å\n"
        deposit_text += "2. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞\n"
        deposit_text += "3. –ü–æ–ª—É—á–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –±–∞–ª–∞–Ω—Å\n\n"
        deposit_text += "‚ö†Ô∏è –†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ."
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            deposit_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        notifications = self.db.get_user_notifications(user_id, unread_only=False)
        
        if not notifications:
            await query.edit_message_text(
                "üîî –£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=Keyboards.get_main_menu()
            )
            return
        
        notifications_text = "üîî –í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
        for i, notification in enumerate(notifications[:10], 1):
            status_icon = "üî¥" if not notification['is_read'] else "‚ö™"
            notifications_text += f"{status_icon} {notification['message']}\n"
            notifications_text += f"üìÖ {notification['created_at']}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üìñ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", callback_data="mark_all_read")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            notifications_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def mark_all_notifications_read(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        self.db.mark_all_notifications_read(user_id)
        
        await query.edit_message_text(
            "‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ!",
            reply_markup=Keyboards.get_main_menu()
        )