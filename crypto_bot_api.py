import requests
import logging
import json
from typing import Optional, Dict, Any
from config import CRYPTOPAY_API_KEY, CRYPTOPAY_WALLET_ID, CRYPTOPAY_API_URL, EXTERNAL_EXCHANGE_WALLET_ADDRESS, EXTERNAL_EXCHANGE_NAME

logger = logging.getLogger(__name__)

class CryptoPayAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CryptoPay API"""
    
    def __init__(self, api_key: str = CRYPTOPAY_API_KEY):
        self.api_key = api_key
        self.base_url = CRYPTOPAY_API_URL
        self.session = requests.Session()
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω CryptoPay API —Å –∫–ª—é—á–æ–º: {api_key[:10]}...")
    
    def create_invoice(self, amount: float, currency: str = "USDT", description: str = "") -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoPay"""
        try:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: {amount} {currency} –¥–ª—è {description}")
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π API –∫–ª—é—á: {self.api_key[:20]}...")
            logger.info(f"URL API: {self.base_url}")
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ CryptoBot API
            headers = {
                "Crypto-Pay-API-Token": self.api_key,
                "Content-Type": "application/json"
            }
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                "asset": currency,
                "amount": str(amount),
                "description": description
            }
            
            logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {headers}")
            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {params}")
            
            response = self.session.get(f"{self.base_url}/createInvoice", headers=headers, params=params)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.status_code} - {response.text}")
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    invoice_data = result.get("result", {})
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å: {invoice_data.get('invoice_id')}")
                    return invoice_data
                else:
                    error_info = result.get('error', {})
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {error_info}")
                    if error_info.get('code') == 401:
                        logger.error("üîë –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ @CryptoBot -> API")
                    return None
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {response.status_code} - {response.text}")
                if response.status_code == 401:
                    logger.error("üîë –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ @CryptoBot -> API")
                return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
            return None
    
    def get_invoice_status(self, invoice_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞"""
        try:
            headers = {
                "Crypto-Pay-API-Token": self.api_key,
                "Content-Type": "application/json"
            }
            
            params = {
                "invoice_ids": invoice_id
            }
            
            response = self.session.get(f"{self.base_url}/getInvoices", headers=headers, params=params)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç getInvoices: {response.status_code} - {response.text}")
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç result.items, –∞ –Ω–µ result –Ω–∞–ø—Ä—è–º—É—é
                    result_data = result.get("result", {})
                    invoices = result_data.get("items", [])
                    
                    if invoices:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–≤–æ–π—Å: {invoices[0].get('invoice_id')} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {invoices[0].get('status')}")
                        return invoices[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –∏–Ω–≤–æ–π—Å
                    else:
                        logger.error(f"–ò–Ω–≤–æ–π—Å {invoice_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return None
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞: {result.get('error')}")
                    return None
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞: {response.status_code}")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞: {e}")
            return None
    
    def check_payment(self, invoice_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞"""
        try:
            status = self.get_invoice_status(invoice_id)
            if status and status.get("status") == "paid":
                logger.info(f"‚úÖ –ò–Ω–≤–æ–π—Å {invoice_id} –æ–ø–ª–∞—á–µ–Ω")
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")
            return False
    
    def transfer(self, user_id: str, amount: float, currency: str = "USDT", description: str = "") -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            headers = {
                "Crypto-Pay-API-Token": self.api_key,
                "Content-Type": "application/json"
            }
            
            params = {
                "user_id": user_id,
                "asset": currency,
                "amount": str(amount),
                "spend_id": description  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ spend_id
            }
            
            response = self.session.get(f"{self.base_url}/transfer", headers=headers, params=params)
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ {amount} {currency} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {result.get('error')}")
                    return False
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
            return False
    
    def send_commission(self, amount: float, currency: str = "USDT", description: str = "") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤–Ω–µ—à–Ω—é—é –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂—É"""
        try:
            from config import COMMISSION_PERCENT
            commission = amount * (COMMISSION_PERCENT / 100)  # –ö–æ–º–∏—Å—Å–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
            return self.send_to_external_wallet(commission, currency, description)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∏—Å—Å–∏–∏: {e}")
            return False
    
    def send_to_external_wallet(self, amount: float, currency: str = "USDT", description: str = "") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª–µ–∫ (–∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂—É)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º CryptoPay API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å
            headers = {
                "Crypto-Pay-API-Token": self.api_key,
                "Content-Type": "application/json"
            }
            
            # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ withdraw
            params = {
                "asset": currency,
                "amount": str(amount),
                "address": EXTERNAL_EXCHANGE_WALLET_ADDRESS,
                "spend_id": f"commission_{description}"
            }
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {amount} {currency} –Ω–∞ {EXTERNAL_EXCHANGE_NAME} –∫–æ—à–µ–ª–µ–∫: {EXTERNAL_EXCHANGE_WALLET_ADDRESS}")
            
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç API CryptoPay
            # –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π endpoint –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            response = self.session.get(f"{self.base_url}/withdraw", headers=headers, params=params)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    logger.info(f"‚úÖ –ö–æ–º–∏—Å—Å–∏—è {amount} {currency} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {EXTERNAL_EXCHANGE_NAME} ({EXTERNAL_EXCHANGE_WALLET_ADDRESS})")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ {EXTERNAL_EXCHANGE_NAME}: {result.get('error')}")
                    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    return self.send_commission_fallback(amount, currency, description)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ {EXTERNAL_EXCHANGE_NAME}: {response.status_code} - {response.text}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                return self.send_commission_fallback(amount, currency, description)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {EXTERNAL_EXCHANGE_NAME}: {e}")
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            return self.send_commission_fallback(amount, currency, description)
    
    def send_commission_fallback(self, amount: float, currency: str = "USDT", description: str = "") -> bool:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            headers = {
                "Crypto-Pay-API-Token": self.api_key,
                "Content-Type": "application/json"
            }
            
            params = {
                "user_id": CRYPTOPAY_WALLET_ID,
                "asset": currency,
                "amount": str(amount),
                "spend_id": f"fallback_commission_{description}"
            }
            
            logger.info(f"üîÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {amount} {currency} –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
            response = self.session.get(f"{self.base_url}/transfer", headers=headers, params=params)
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    logger.info(f"‚úÖ –ö–æ–º–∏—Å—Å–∏—è {amount} {currency} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ {CRYPTOPAY_WALLET_ID}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏: {result.get('error')}")
                    return False
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∏—Å—Å–∏–∏: {e}")
            return False
    
    def get_balance(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            headers = {
                "Crypto-Pay-API-Token": self.api_key,
                "Content-Type": "application/json"
            }
            
            response = self.session.get(f"{self.base_url}/getBalance", headers=headers)
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {response.status_code}")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
crypto_api = CryptoPayAPI() 